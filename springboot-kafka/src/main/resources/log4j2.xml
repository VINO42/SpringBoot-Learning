<?xml version="1.0" encoding="UTF-8"?>
<!-- status : 这个用于设置log4j2自身内部的信息输出,可以不设置,当设置成trace时,会看到log4j2内部各种详细输出 monitorInterval
    : Log4j能够自动检测修改配置文件和重新配置本身, 设置间隔秒数。 -->
<configuration status="off" monitorInterval="60">
    <properties>
        <!--注意sys:log.home为启动服务时候 日志文件目录-->
        <property name="LOG_HOME">${spring:logging.file.path:-/logs}</property>
        <property name="APPLICATION_NAME">${spring:spring.application.name:-N_A}</property>
        <property name="rootLogLevel">${spring:logging.level.root:-info}</property>
        <property name="cosoleLogLevel">${spring:logging.level.root:-info}</property>
        <property name="LOG_PATTERN"> %d{yyyy-MM-dd HH:mm:ss.SSS}{GMT+8} | [requestId:%X{requestId}] | [%tid] | %-5level %class{36} %L %M | %msg%xEx%n</property>
        <!-- 日志备份目录 -->
    </properties>

    <appenders>
        <SpringProfile  name="dev | local | stage | test | default">
            <!--========================================================== 定义控制台输出 =============================================================-->
            <Console name="CONSOLE" target="SYSTEM_OUT" follow="true">
                <!-- 控制台只输出level及以上级别的信息(onMatch),其他的直接拒绝(onMismatch) -->
                <ThresholdFilter level="DEBUG" onMatch="ACCEPT"
                                 onMismatch="DENY"/>
                <PatternLayout
                        charset="UTF-8"
                        pattern="${LOG_PATTERN}"/>
            </Console>

            <!-- ======================================================= 打印root中指定的level级别以上的日志到文件 ===========================================-->
            <RollingRandomAccessFile name="FILE"
                                     fileName="/${LOG_HOME}/${date:yyyy-MM-dd}/${APPLICATION_NAME}.log"
                                     filePattern="/${LOG_HOME}/${date:yyyy-MM-dd}/all/${APPLICATION_NAME}-%d{yyyy-MM-dd-HH}-%i.log.zip">
                <PatternLayout
                        charset="UTF-8"
                        pattern="${LOG_PATTERN}"/>
                <Policies>
                    <TimeBasedTriggeringPolicy interval="1"
                                               modulate="true"/>
                    <SizeBasedTriggeringPolicy size="100MB"/>
                </Policies>
                <DefaultRolloverStrategy max="24">
                    <!-- 对于指定的路径下的指定后缀的文件，只保留14天的日志文件，那么最多会有14天*24小时*20个日志文件 -->
                    <!-- 注意应用需要根据业务需求和磁盘大小评估需要保留的日志个数，对于500M的日志文件来说，要根据应用日志的情况，观察单个日志压缩后文件大小，并计算总大小需要的空间 -->
                    <Delete basePath="${LOG_HOME}" maxDepth="2">
                        <IfFileName glob="*.log.zip"/>
                        <!--!Note: 这里的age必须和filePattern协调, 后者是精确到HH, 这里就要写成xH, xd就不起作用
                        另外, 数字最好>2, 否则可能造成删除的时候, 最近的文件还处于被占用状态,导致删除不成功!-->
                        <!--14天-->
                        <IfLastModified age="336H"/>
                    </Delete>
                </DefaultRolloverStrategy>
            </RollingRandomAccessFile>
            <!--==================================================== 打印请求响应日志到文件 ========================================================== -->
            <RollingRandomAccessFile name="request"
                                     fileName="/${LOG_HOME}/${date:yyyy-MM-dd}/${APPLICATION_NAME}-request.log"
                                     filePattern="/${LOG_HOME}/${date:yyyy-MM-dd}/request_log/${APPLICATION_NAME}-%d{yyyy-MM-dd-HH}-%i-request.log.zip"
                                     immediateFlush="true">
                <PatternLayout
                        charset="UTF-8"
                        pattern="[requestId:%X{requestId}] | [%tid] | [%t] |  %d{yyyy-MM-dd HH:mm:ss.SSS}{GMT+8} | %-5p | %m%n"/>
                <Policies>
                    <TimeBasedTriggeringPolicy interval="1"
                                               modulate="true"/>
                    <SizeBasedTriggeringPolicy size="100MB"/>
                </Policies>
                <DefaultRolloverStrategy max="24">
                    <Delete basePath="${LOG_HOME}" maxDepth="2">
                        <IfFileName glob="*request.log.zip"/>
                        <!--!Note: 这里的age必须和filePattern协调, 后者是精确到HH, 这里就要写成xH, xd就不起作用
                        另外, 数字最好>2, 否则可能造成删除的时候, 最近的文件还处于被占用状态,导致删除不成功!-->
                        <!--14天-->
                        <IfLastModified age="336H"/>
                    </Delete>
                </DefaultRolloverStrategy>
            </RollingRandomAccessFile>
            <!--============================================================ WARN日志=============================================================== -->
            <RollingRandomAccessFile name="WARN"
                                     immediateFlush="true"
                                     fileName="/${LOG_HOME}/${date:yyyy-MM-dd}/${APPLICATION_NAME}-warn.log"
                                     filePattern="/${LOG_HOME}/${date:yyyy-MM-dd}/warn/${APPLICATION_NAME}-warn-log.%d{yyyy-MM-dd}-%i-warn.log.zip">
                <Filters>
                    <ThresholdFilter level="ERROR" onMatch="DENY" onMismatch="NEUTRAL"/>
                    <ThresholdFilter level="WARN" onMatch="ACCEPT" onMismatch="DENY"/>
                </Filters>
                <PatternLayout
                        charset="UTF-8"
                        pattern="${LOG_PATTERN}"/>
                <Policies>
                    <!-- 每天生成一个 -->
                    <TimeBasedTriggeringPolicy interval="1"
                                               modulate="true"/>
                    <!--每个最大500MB -->
                    <SizeBasedTriggeringPolicy size="100MB"/>
                </Policies>
                <DefaultRolloverStrategy max="24">
                    <Delete basePath="${LOG_HOME}" maxDepth="2">
                        <IfFileName glob="*warn.log.zip"/>
                        <!--!Note: 这里的age必须和filePattern协调, 后者是精确到HH, 这里就要写成xH, xd就不起作用
                        另外, 数字最好>2, 否则可能造成删除的时候, 最近的文件还处于被占用状态,导致删除不成功!-->
                        <!--14天-->
                        <IfLastModified age="336H"/>
                    </Delete>
                </DefaultRolloverStrategy>
            </RollingRandomAccessFile>
            <!--============================================================ error日志=============================================================== -->
            <RollingRandomAccessFile name="ERROR"
                                     immediateFlush="true"
                                     fileName="/${LOG_HOME}/${date:yyyy-MM-dd}/${APPLICATION_NAME}-error.log"
                                     filePattern="/${LOG_HOME}/${date:yyyy-MM-dd}/error/${APPLICATION_NAME}-error-log.%d{yyyy-MM-dd}-%i-error.log.zip">
                <ThresholdFilter level="ERROR" onMatch="ACCEPT" onMismatch="DENY"/>
                <PatternLayout
                        charset="UTF-8"
                        pattern="${LOG_PATTERN}"/>
                <Policies>
                    <!-- 每天生成一个 -->
                    <TimeBasedTriggeringPolicy interval="1"
                                               modulate="true"/>
                    <!--每个最大500MB -->
                    <SizeBasedTriggeringPolicy size="100MB"/>
                </Policies>
                <DefaultRolloverStrategy max="24">
                    <Delete basePath="${LOG_HOME}" maxDepth="2">
                        <IfFileName glob="*error.log.zip"/>
                        <!--!Note: 这里的age必须和filePattern协调, 后者是精确到HH, 这里就要写成xH, xd就不起作用
                        另外, 数字最好>2, 否则可能造成删除的时候, 最近的文件还处于被占用状态,导致删除不成功!-->
                        <!--14天-->
                        <IfLastModified age="336H"/>
                    </Delete>
                </DefaultRolloverStrategy>
            </RollingRandomAccessFile>
            <!--        <Async name="ASYNC_FILE" bufferSize="262144">
                        <appender-ref ref="file"/>
                        <LinkedTransferQueue/>
                    </Async>
                    <Async name="ASYNC_ERROR" bufferSize="262144">
                        <appender-ref ref="error"/>
                        &lt;!&ndash;https://logging.apache.org/log4j/2.x/manual/appenders.html#AsyncAppender&ndash;&gt;
                        &lt;!&ndash;<DisruptorBlockingQueue/>&ndash;&gt;
                        <LinkedTransferQueue/>
                    </Async>-->
        </SpringProfile>

        <SpringProfile  name="prod">
            <!--========================================================== 定义控制台输出 =============================================================-->
            <Console name="CONSOLE" target="SYSTEM_OUT" follow="true">
                <!-- 控制台只输出level及以上级别的信息(onMatch),其他的直接拒绝(onMismatch) -->
                <ThresholdFilter level="INFO" onMatch="ACCEPT"
                                 onMismatch="DENY"/>
                <PatternLayout
                        charset="UTF-8"
                        pattern="${LOG_PATTERN}"/>
            </Console>

            <!-- ======================================================= 打印root中指定的level级别以上的日志到文件 ===========================================-->
            <RollingRandomAccessFile name="FILE"
                                     fileName="/${LOG_HOME}/${date:yyyy-MM-dd}/${APPLICATION_NAME}.log"
                                     filePattern="/${LOG_HOME}/${date:yyyy-MM-dd}/all/${APPLICATION_NAME}-%d{yyyy-MM-dd-HH}-%i.log.zip">
                <PatternLayout
                        charset="UTF-8"
                        pattern="${LOG_PATTERN}"/>
                <Policies>
                    <TimeBasedTriggeringPolicy interval="1"
                                               modulate="true"/>
                    <SizeBasedTriggeringPolicy size="100MB"/>
                </Policies>
                <DefaultRolloverStrategy max="24">
                    <!-- 对于指定的路径下的指定后缀的文件，只保留14天的日志文件，那么最多会有14天*24小时*20个日志文件 -->
                    <!-- 注意应用需要根据业务需求和磁盘大小评估需要保留的日志个数，对于500M的日志文件来说，要根据应用日志的情况，观察单个日志压缩后文件大小，并计算总大小需要的空间 -->
                    <Delete basePath="${LOG_HOME}" maxDepth="2">
                        <IfFileName glob="*.log.zip"/>
                        <!--!Note: 这里的age必须和filePattern协调, 后者是精确到HH, 这里就要写成xH, xd就不起作用
                        另外, 数字最好>2, 否则可能造成删除的时候, 最近的文件还处于被占用状态,导致删除不成功!-->
                        <!--14天-->
                        <IfLastModified age="336H"/>
                    </Delete>
                </DefaultRolloverStrategy>
            </RollingRandomAccessFile>
            <!--==================================================== 打印请求响应日志到文件 ========================================================== -->
            <RollingRandomAccessFile name="request"
                                     fileName="/${LOG_HOME}/${date:yyyy-MM-dd}/${APPLICATION_NAME}-request.log"
                                     filePattern="/${LOG_HOME}/${date:yyyy-MM-dd}/request_log/${APPLICATION_NAME}-%d{yyyy-MM-dd-HH}-%i-request.log.zip"
                                     immediateFlush="true">
                <PatternLayout
                        charset="UTF-8"
                        pattern="[requestId:%X{requestId}] | [%tid] | [%t] |  %d{yyyy-MM-dd HH:mm:ss.SSS}{GMT+8} | %-5p | %m%n"/>
                <Policies>
                    <TimeBasedTriggeringPolicy interval="1"
                                               modulate="true"/>
                    <SizeBasedTriggeringPolicy size="100MB"/>
                </Policies>
                <DefaultRolloverStrategy max="24">
                    <Delete basePath="${LOG_HOME}" maxDepth="2">
                        <IfFileName glob="*request.log.zip"/>
                        <!--!Note: 这里的age必须和filePattern协调, 后者是精确到HH, 这里就要写成xH, xd就不起作用
                        另外, 数字最好>2, 否则可能造成删除的时候, 最近的文件还处于被占用状态,导致删除不成功!-->
                        <!--14天-->
                        <IfLastModified age="336H"/>
                    </Delete>
                </DefaultRolloverStrategy>
            </RollingRandomAccessFile>
            <!--============================================================ WARN日志=============================================================== -->
            <RollingRandomAccessFile name="WARN"
                                     immediateFlush="true"
                                     fileName="/${LOG_HOME}/${date:yyyy-MM-dd}/${APPLICATION_NAME}-warn.log"
                                     filePattern="/${LOG_HOME}/${date:yyyy-MM-dd}/warn/${APPLICATION_NAME}-warn-log.%d{yyyy-MM-dd}-%i-warn.log.zip">
                <Filters>
                    <ThresholdFilter level="ERROR" onMatch="DENY" onMismatch="NEUTRAL"/>
                    <ThresholdFilter level="WARN" onMatch="ACCEPT" onMismatch="DENY"/>
                </Filters>
                <PatternLayout
                        charset="UTF-8"
                        pattern="${LOG_PATTERN}"/>
                <Policies>
                    <!-- 每天生成一个 -->
                    <TimeBasedTriggeringPolicy interval="1"
                                               modulate="true"/>
                    <!--每个最大500MB -->
                    <SizeBasedTriggeringPolicy size="100MB"/>
                </Policies>
                <DefaultRolloverStrategy max="24">
                    <Delete basePath="${LOG_HOME}" maxDepth="2">
                        <IfFileName glob="*warn.log.zip"/>
                        <!--!Note: 这里的age必须和filePattern协调, 后者是精确到HH, 这里就要写成xH, xd就不起作用
                        另外, 数字最好>2, 否则可能造成删除的时候, 最近的文件还处于被占用状态,导致删除不成功!-->
                        <!--14天-->
                        <IfLastModified age="336H"/>
                    </Delete>
                </DefaultRolloverStrategy>
            </RollingRandomAccessFile>
            <!--============================================================ error日志=============================================================== -->
            <RollingRandomAccessFile name="ERROR"
                                     immediateFlush="true"
                                     fileName="/${LOG_HOME}/${date:yyyy-MM-dd}/${APPLICATION_NAME}-error.log"
                                     filePattern="/${LOG_HOME}/${date:yyyy-MM-dd}/error/${APPLICATION_NAME}-error-log.%d{yyyy-MM-dd}-%i-error.log.zip">
                <ThresholdFilter level="ERROR" onMatch="ACCEPT" onMismatch="DENY"/>
                <PatternLayout
                        charset="UTF-8"
                        pattern="${LOG_PATTERN}"/>
                <Policies>
                    <!-- 每天生成一个 -->
                    <TimeBasedTriggeringPolicy interval="1"
                                               modulate="true"/>
                    <!--每个最大500MB -->
                    <SizeBasedTriggeringPolicy size="100MB"/>
                </Policies>
                <DefaultRolloverStrategy max="24">
                    <Delete basePath="${LOG_HOME}" maxDepth="2">
                        <IfFileName glob="*error.log.zip"/>
                        <!--!Note: 这里的age必须和filePattern协调, 后者是精确到HH, 这里就要写成xH, xd就不起作用
                        另外, 数字最好>2, 否则可能造成删除的时候, 最近的文件还处于被占用状态,导致删除不成功!-->
                        <!--14天-->
                        <IfLastModified age="336H"/>
                    </Delete>
                </DefaultRolloverStrategy>
            </RollingRandomAccessFile>
            <!--        <Async name="ASYNC_FILE" bufferSize="262144">
                        <appender-ref ref="file"/>
                        <LinkedTransferQueue/>
                    </Async>
                    <Async name="ASYNC_ERROR" bufferSize="262144">
                        <appender-ref ref="error"/>
                        &lt;!&ndash;https://logging.apache.org/log4j/2.x/manual/appenders.html#AsyncAppender&ndash;&gt;
                        &lt;!&ndash;<DisruptorBlockingQueue/>&ndash;&gt;
                        <LinkedTransferQueue/>
                    </Async>-->
        </SpringProfile>
    </appenders>

        <loggers>
            <SpringProfile  name="dev | local | stage | test | default">
                <!-- 3rdparty Loggers -->
                <logger name="org.springframework.core" level="DEBUG"></logger>
                <logger name="org.springframework.beans" level="DEBUG"></logger>
                <logger name="org.springframework.context" level="DEBUG"></logger>
                <logger name="org.springframework.web" level="DEBUG"></logger>
                <logger name="org.jboss.netty" level="WARN"></logger>
                <logger name="org.apache.http" level="WARN"></logger>
                <logger name="org.apache.ibatis" level="WARN"></logger>
                <logger name="com.mybatisflex" level="debug"></logger>
                <logger name="org.redisson" level="WARN"></logger>
                <logger name="com.alicp" level="WARN"></logger>
                <logger name="io.github.vino42" level="DEBUG"></logger>
                <logger name="io.github.vino42.log.RequestLogAspect" level="DEBUG" additivity="true">
                    <appender-ref ref="request"/>
                </logger>
                <!-- Root Logger -->
                <root level="${rootLogLevel:-debug}" includeLocation="true">
                    <appender-ref ref="CONSOLE"/>
                    <AppenderRef ref="FILE"/>
                    <AppenderRef ref="WARN"/>
                    <AppenderRef ref="ERROR"/>
                </root>
            </SpringProfile>

            <SpringProfile name="prod">
                <!-- 3rdparty Loggers -->
                <logger name="org.springframework.core" level="INFO"></logger>
                <logger name="org.springframework.beans" level="INFO"></logger>
                <logger name="org.springframework.context" level="INFO"></logger>
                <logger name="org.springframework.web" level="INFO"></logger>
                <logger name="org.jboss.netty" level="WARN"></logger>
                <logger name="org.apache.http" level="WARN"></logger>
                <logger name="org.apache.ibatis" level="WARN"></logger>
                <logger name="com.mybatisflex" level="INFO"></logger>
                <logger name="org.redisson" level="WARN"></logger>
                <logger name="com.alicp" level="WARN"></logger>
                <logger name="io.github.vino42" level="INFO"></logger>
                <logger name="io.github.vino42.log.RequestLogAspect" level="INFO" additivity="true">
                    <appender-ref ref="request"/>
                </logger>
                <!-- Root Logger -->
                <root level="INFO" includeLocation="true">
                    <appender-ref ref="CONSOLE"/>
                    <AppenderRef ref="FILE"/>
                    <AppenderRef ref="WARN"/>
                    <AppenderRef ref="ERROR"/>
                </root>
            </SpringProfile>
        </loggers>
</configuration>